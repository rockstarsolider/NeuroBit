# Generated by Django 5.2.4 on 2025-07-25 13:53

import courses.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Feature',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Learner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('dob', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other'), ('na', 'Prefer\xa0not\xa0to\xa0say')], default='na', max_length=12)),
                ('country', models.CharField(help_text='ISO‑3166‑1 alpha‑2 code', max_length=2)),
                ('signup_date', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive')], default='active', max_length=8)),
                ('notes', models.TextField(blank=True)),
            ],
            options={
                'verbose_name_plural': 'Learners',
                'ordering': ('-signup_date',),
            },
        ),
        migrations.CreateModel(
            name='LearningPath',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120, unique=True)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Mentor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('bio', models.TextField(blank=True)),
                ('specialties', models.JSONField(blank=True, default=list)),
                ('hire_date', models.DateField()),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive')], default='active', max_length=8)),
            ],
            options={
                'ordering': ('last_name', 'first_name'),
            },
        ),
        migrations.CreateModel(
            name='SessionOccurrence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('planned_date', models.DateField()),
                ('planned_start_time', models.TimeField()),
                ('planned_end_time', models.TimeField()),
                ('actual_start_time', models.TimeField(blank=True, null=True)),
                ('actual_end_time', models.TimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('canceled', 'Canceled'), ('held', 'Held')], default='scheduled', max_length=10)),
                ('recorded_meet_link', models.URLField(blank=True, max_length=500)),
                ('notes', models.TextField(blank=True)),
            ],
            options={
                'ordering': ('-planned_date', 'planned_start_time'),
            },
        ),
        migrations.CreateModel(
            name='SessionType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(choices=[('private', 'Private'), ('public', 'Public'), ('meta_public', 'Meta\xa0Public'), ('meta_private', 'Meta\xa0Private')], max_length=12, unique=True)),
                ('name_fa', models.CharField(max_length=32)),
                ('duration_minutes', models.PositiveSmallIntegerField()),
                ('max_participants', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'ordering': ('code',),
            },
        ),
        migrations.CreateModel(
            name='LearnerEnrolment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enroll_date', models.DateField(default=django.utils.timezone.now)),
                ('unenroll_date', models.DateField(blank=True, null=True)),
                ('learner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrolments', to='courses.learner')),
                ('learning_path', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrolments', to='courses.learningpath')),
            ],
        ),
        migrations.CreateModel(
            name='LearnerSubscribePlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(default=django.utils.timezone.now)),
                ('discount', models.DecimalField(decimal_places=2, default=0, help_text='% discount (e.g.,\xa010.00\xa0=\xa010%)', max_digits=5)),
                ('duration_in_days', models.PositiveSmallIntegerField(choices=[(30, '30\xa0days'), (90, '90\xa0days'), (120, '120\xa0days')])),
                ('status', models.CharField(choices=[('active', 'Active'), ('expired', 'Expired'), ('canceled', 'Canceled'), ('reserved', 'Reserved'), ('freeze', 'Frozen')], default='active', max_length=8)),
                ('learner_enrolment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscribe_plans', to='courses.learnerenrolment')),
            ],
            options={
                'ordering': ('-start_date',),
            },
        ),
        migrations.CreateModel(
            name='LearnerSubscribePlanFreeze',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField()),
                ('duration', models.PositiveSmallIntegerField(help_text='Freeze duration in days')),
                ('subscribe_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='freezes', to='courses.learnersubscribeplan')),
            ],
            options={
                'ordering': ('-start_date',),
            },
        ),
        migrations.CreateModel(
            name='EducationalStep',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sequence_no', models.PositiveSmallIntegerField()),
                ('title', models.CharField(max_length=120)),
                ('description', models.TextField(blank=True)),
                ('expected_duration_days', models.PositiveSmallIntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_mandatory', models.BooleanField(default=True)),
                ('learning_path', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='steps', to='courses.learningpath')),
            ],
            options={
                'ordering': ('learning_path', 'sequence_no'),
            },
        ),
        migrations.CreateModel(
            name='MentorAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(default=django.utils.timezone.now)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('reason_for_change', models.TextField(blank=True)),
                ('enrolment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mentor_assignments', to='courses.learnerenrolment')),
                ('mentor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='courses.mentor')),
            ],
            options={
                'ordering': ('-start_date',),
            },
        ),
        migrations.CreateModel(
            name='PlanFeature',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feature', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feature_plans', to='courses.feature')),
            ],
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=120)),
                ('type', models.CharField(choices=[('video', 'Video'), ('article', 'Article'), ('repo', 'Repository'), ('other', 'Other')], max_length=12)),
                ('url_or_location', models.CharField(max_length=500)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('step', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resources', to='courses.educationalstep')),
            ],
        ),
        migrations.CreateModel(
            name='SessionParticipant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('guest_name', models.CharField(blank=True, max_length=120)),
                ('attendance_status', models.CharField(choices=[('present', 'Present'), ('absent', 'Absent'), ('late', 'Late')], default='absent', max_length=8)),
                ('learner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='session_participations', to='courses.learner')),
                ('occurrence', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='courses.sessionoccurrence')),
            ],
        ),
        migrations.CreateModel(
            name='SessionTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weekday', models.IntegerField(choices=[(1, 'Monday'), (2, 'Tuesday'), (3, 'Wednesday'), (4, 'Thursday'), (5, 'Friday'), (6, 'Saturday'), (7, 'Sunday')])),
                ('active_from', models.DateField(default=django.utils.timezone.now)),
                ('status', models.CharField(choices=[('active', 'Active'), ('expired', 'Expired')], default='active', max_length=8)),
                ('google_meet_link', models.URLField(max_length=500)),
                ('learning_path', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='session_templates', to='courses.learningpath')),
                ('mentor_assignment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='session_templates', to='courses.mentorassignment')),
                ('session_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='templates', to='courses.sessiontype')),
            ],
            options={
                'ordering': ('weekday', 'active_from'),
            },
        ),
        migrations.AddField(
            model_name='sessionoccurrence',
            name='template',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='occurrences', to='courses.sessiontemplate'),
        ),
        migrations.CreateModel(
            name='StepProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('initial_due_date', models.DateField()),
                ('initial_promise_days', models.PositiveSmallIntegerField()),
                ('skipped', models.BooleanField(default=False)),
                ('enrolment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='step_progresses', to='courses.learnerenrolment')),
                ('step', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='progresses', to='courses.educationalstep')),
            ],
            options={
                'ordering': ('initial_due_date',),
            },
        ),
        migrations.CreateModel(
            name='StepExtension',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('extended_by_days', models.PositiveSmallIntegerField()),
                ('requested_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('approved_by_mentor', models.BooleanField(default=False)),
                ('reason', models.TextField(blank=True)),
                ('step_progress', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='extensions', to='courses.stepprogress')),
            ],
            options={
                'ordering': ('-requested_at',),
            },
        ),
        migrations.CreateModel(
            name='SocialPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('platform', models.CharField(max_length=32)),
                ('url', models.URLField(max_length=500)),
                ('posted_at', models.DateTimeField()),
                ('step_progress', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='social_posts', to='courses.stepprogress')),
            ],
            options={
                'ordering': ('-posted_at',),
            },
        ),
        migrations.CreateModel(
            name='SubscriptionPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True)),
                ('description', models.TextField(blank=True)),
                ('price_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('duration_in_days', models.PositiveSmallIntegerField(choices=[(30, '30\xa0days'), (90, '90\xa0days'), (120, '120\xa0days')])),
                ('is_active', models.BooleanField(default=True)),
                ('features', models.ManyToManyField(related_name='plans', through='courses.PlanFeature', to='courses.feature')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.AddField(
            model_name='planfeature',
            name='plan',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='plan_features', to='courses.subscriptionplan'),
        ),
        migrations.AddField(
            model_name='learnersubscribeplan',
            name='subscription_plan',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='learner_plans', to='courses.subscriptionplan'),
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=120)),
                ('description', models.TextField(blank=True)),
                ('order_in_step', models.PositiveSmallIntegerField()),
                ('is_required', models.BooleanField(default=True)),
                ('step', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='courses.educationalstep')),
            ],
            options={
                'ordering': ('step', 'order_in_step'),
            },
        ),
        migrations.CreateModel(
            name='TaskSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submitted_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('artifact_url', models.URLField(blank=True, max_length=500)),
                ('file', models.FileField(blank=True, upload_to=courses.models.submissions_upload_to)),
                ('report_video_file', models.FileField(blank=True, help_text='Optional video', upload_to=courses.models.submissions_upload_to)),
                ('report_video_link', models.URLField(blank=True, max_length=500)),
                ('repository', models.URLField(blank=True, max_length=500)),
                ('comment', models.TextField(blank=True)),
                ('step_progress', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='courses.stepprogress')),
            ],
            options={
                'ordering': ('-submitted_at',),
            },
        ),
        migrations.CreateModel(
            name='TaskEvaluation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score_numeric', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('feedback_text', models.TextField(blank=True)),
                ('evaluated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('mentor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='evaluations', to='courses.mentor')),
                ('submission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='evaluations', to='courses.tasksubmission')),
            ],
            options={
                'ordering': ('-evaluated_at',),
            },
        ),
        migrations.AddIndex(
            model_name='learnerenrolment',
            index=models.Index(fields=['learning_path', 'enroll_date'], name='courses_lea_learnin_03aaf9_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='learnerenrolment',
            unique_together={('learner', 'learning_path')},
        ),
        migrations.AlterUniqueTogether(
            name='educationalstep',
            unique_together={('learning_path', 'sequence_no')},
        ),
        migrations.AlterUniqueTogether(
            name='mentorassignment',
            unique_together={('enrolment', 'mentor', 'start_date')},
        ),
        migrations.AlterUniqueTogether(
            name='sessionparticipant',
            unique_together={('learner', 'occurrence')},
        ),
        migrations.AlterUniqueTogether(
            name='sessionoccurrence',
            unique_together={('template', 'planned_date', 'planned_start_time')},
        ),
        migrations.AlterUniqueTogether(
            name='stepprogress',
            unique_together={('enrolment', 'step')},
        ),
        migrations.AlterUniqueTogether(
            name='planfeature',
            unique_together={('plan', 'feature')},
        ),
        migrations.AlterUniqueTogether(
            name='learnersubscribeplan',
            unique_together={('subscription_plan', 'learner_enrolment', 'start_date')},
        ),
        migrations.AlterUniqueTogether(
            name='task',
            unique_together={('step', 'order_in_step')},
        ),
        migrations.AddConstraint(
            model_name='taskevaluation',
            constraint=models.CheckConstraint(condition=models.Q(('score_numeric__gte', 1), ('score_numeric__lte', 5)), name='valid_score_range'),
        ),
        migrations.AlterUniqueTogether(
            name='taskevaluation',
            unique_together={('submission', 'mentor')},
        ),
    ]
