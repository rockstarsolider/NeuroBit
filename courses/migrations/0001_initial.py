# Generated by Django 5.2.4 on 2025-08-04 10:05

import courses.models
import django.contrib.postgres.fields
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Feature',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='LearningPath',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120, unique=True)),
                ('description', models.TextField(blank=True, max_length=7000)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='SessionType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(choices=[('private', 'Private'), ('public', 'Public'), ('meta_public', 'Meta‑Public'), ('meta_private', 'Meta‑Private')], max_length=12, unique=True)),
                ('name_fa', models.CharField(max_length=32)),
                ('duration_minutes', models.PositiveSmallIntegerField()),
                ('max_participants', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'ordering': ('code',),
            },
        ),
        migrations.CreateModel(
            name='SocialMedia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('platform', models.CharField(help_text='Social-media platform (e.g. Twitter, LinkedIn).', max_length=32, unique=True)),
            ],
            options={
                'ordering': ('platform',),
            },
        ),
        migrations.CreateModel(
            name='Specialty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.SlugField(unique=True)),
                ('name', models.CharField(max_length=100)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='SubscriptionPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='(Basic/Plus/Pro)', max_length=20, unique=True)),
                ('description', models.TextField(blank=True)),
                ('price_amount', models.PositiveIntegerField(default=0, help_text='Toman')),
                ('duration_in_days', models.PositiveSmallIntegerField(choices=[(30, '30\xa0days'), (90, '90\xa0days'), (180, '180\xa0days'), (270, '270\xa0days'), (360, '360\xa0days')], default=30)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Learner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mother_phone', models.CharField(blank=True, max_length=15, validators=[django.core.validators.RegexValidator(message='Enter a valid phone number (e.g.\xa0+989336628244 or 09336628244).', regex='^(?:\\+?\\d{1,3})?[0]?\\d{9,14}$')])),
                ('father_phone', models.CharField(blank=True, max_length=15, validators=[django.core.validators.RegexValidator(message='Enter a valid phone number (e.g.\xa0+989336628244 or 09336628244).', regex='^(?:\\+?\\d{1,3})?[0]?\\d{9,14}$')])),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive')], default='active', max_length=8)),
                ('notes', models.TextField(blank=True, help_text='Any data about the learner.')),
                ('signup_date', models.DateTimeField(auto_now_add=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='learner_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-signup_date',),
            },
        ),
        migrations.CreateModel(
            name='LearnerEnrolment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enroll_date', models.DateTimeField(auto_now_add=True)),
                ('unenroll_date', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('graduated', 'Graduated'), ('dropped', 'Dropped'), ('reserved', 'Reserved')], default='active', max_length=9)),
                ('learner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrolments', to='courses.learner')),
                ('learning_path', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrolments', to='courses.learningpath')),
            ],
        ),
        migrations.CreateModel(
            name='LearnerSubscribePlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_datetime', models.DateTimeField(default=django.utils.timezone.now)),
                ('end_datetime', models.DateTimeField(blank=True, null=True)),
                ('discount', models.PositiveSmallIntegerField(default=0, help_text='% discount (e.g.\xa010\xa0=>\xa010%)', validators=[django.core.validators.MaxValueValidator(100, '100 % discount is the maximum allowed value!')])),
                ('status', models.CharField(choices=[('active', 'Active'), ('expired', 'Expired'), ('canceled', 'Canceled'), ('reserved', 'Reserved'), ('freeze', 'Frozen')], default='active', max_length=8)),
                ('final_cost', models.PositiveBigIntegerField(default=0)),
                ('learner_enrolment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='learner_subscribe_plans', to='courses.learnerenrolment')),
                ('subscription_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='learner_subscribe_plans', to='courses.subscriptionplan')),
            ],
            options={
                'ordering': ('-start_datetime',),
            },
        ),
        migrations.CreateModel(
            name='LearnerSubscribePlanFreeze',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('duration', models.PositiveSmallIntegerField(help_text='Freeze duration in days')),
                ('start_date', models.DateTimeField(auto_now_add=True)),
                ('subscribe_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='freezes', to='courses.learnersubscribeplan')),
            ],
            options={
                'ordering': ('-start_date',),
            },
        ),
        migrations.CreateModel(
            name='EducationalStep',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sequence_no', models.PositiveSmallIntegerField()),
                ('title', models.CharField(max_length=120)),
                ('description', models.TextField(blank=True, max_length=7000)),
                ('expected_duration_days', models.PositiveSmallIntegerField()),
                ('is_mandatory', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('learning_path', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='steps', to='courses.learningpath')),
            ],
            options={
                'ordering': ('learning_path', 'sequence_no'),
            },
        ),
        migrations.CreateModel(
            name='Mentor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.TextField(blank=True)),
                ('bio', models.TextField(blank=True)),
                ('hire_date', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive')], default='active', max_length=8)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='mentor_profile', to=settings.AUTH_USER_MODEL)),
                ('specialties', models.ManyToManyField(blank=True, related_name='mentors', to='courses.specialty')),
            ],
            options={
                'ordering': ('user__last_name', 'user__first_name'),
            },
        ),
        migrations.CreateModel(
            name='MentorAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(default=django.utils.timezone.now)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('reason_for_change', models.TextField(blank=True)),
                ('code_review_pro_session_datetime', models.DateTimeField(blank=True, null=True)),
                ('code_review_session_day', models.PositiveSmallIntegerField(choices=[(1, 'Monday'), (2, 'Tuesday'), (3, 'Wednesday'), (4, 'Thursday'), (5, 'Friday'), (6, 'Saturday'), (7, 'Sunday')], default=6)),
                ('code_review_session_time', models.TimeField(default=django.utils.timezone.now)),
                ('enrolment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mentor_assignments', to='courses.learnerenrolment')),
                ('mentor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='courses.mentor')),
            ],
            options={
                'ordering': ('-start_date',),
            },
        ),
        migrations.CreateModel(
            name='MentorGroupSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('suppused_day', models.PositiveSmallIntegerField(choices=[(1, 'Monday'), (2, 'Tuesday'), (3, 'Wednesday'), (4, 'Thursday'), (5, 'Friday'), (6, 'Saturday'), (7, 'Sunday')], default=6)),
                ('suppoused_time', models.TimeField(blank=True, null=True)),
                ('google_meet_link', models.URLField(blank=True, help_text='The link for joining the meeting session.')),
                ('learning_path', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_sessions', to='courses.learningpath')),
                ('mentor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_sessions', to='courses.mentor')),
                ('session_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_sessions', to='courses.sessiontype')),
            ],
            options={
                'ordering': ('-suppused_day', '-suppoused_time'),
            },
        ),
        migrations.CreateModel(
            name='MentorGroupSessionOccurrence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('occurence_datetime', models.DateTimeField()),
                ('occurence_datetime_changed', models.BooleanField(default=False, help_text='⚠️If the inital DateTime has been changed then You must turn this on!')),
                ('new_datetime', models.DateTimeField(blank=True, null=True)),
                ('reason_for_change', models.TextField(max_length=10000)),
                ('session_video_record', models.URLField(blank=True, help_text='Link for downloading the session record.', null=True)),
                ('mentor_group_session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mentor_group_sessions', to='courses.mentorgroupsession')),
            ],
            options={
                'ordering': ('-occurence_datetime',),
            },
        ),
        migrations.CreateModel(
            name='MentorGroupSessionParticipant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('present', models.BooleanField(default=True, help_text='Status (present or absent.)')),
                ('mentor_assignment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='courses.mentorassignment')),
                ('mentor_group_session_occurence', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='courses.mentorgroupsessionoccurrence')),
            ],
        ),
        migrations.CreateModel(
            name='Resources',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=120)),
                ('type', models.CharField(choices=[('video', 'Video'), ('doc', 'Document'), ('book', 'Book'), ('course', 'Course'), ('playlist', 'Playlist'), ('article', 'Article'), ('repository', 'Repository'), ('other', 'Other')], max_length=12)),
                ('address', models.URLField(blank=True)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('step', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resources', to='courses.educationalstep')),
            ],
        ),
        migrations.CreateModel(
            name='StepProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('skipped', models.BooleanField(default=False, help_text='If True, promise_days must be 0')),
                ('initial_promise_date', models.DateTimeField(auto_now_add=True)),
                ('initial_promise_days', models.PositiveSmallIntegerField(default=1)),
                ('repromise_count', models.PositiveSmallIntegerField(default=0)),
                ('task_completion_date', models.DateTimeField(blank=True, null=True)),
                ('educational_step', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='step_progresses', to='courses.educationalstep')),
                ('mentor_assignment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='step_progresses', to='courses.mentorassignment')),
            ],
            options={
                'ordering': ('initial_promise_date',),
            },
        ),
        migrations.CreateModel(
            name='StepExtension',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('extended_by_days', models.PositiveSmallIntegerField(default=0)),
                ('requested_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('approved_by_mentor', models.BooleanField(default=False)),
                ('reason', models.TextField(blank=True)),
                ('step_progress', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='extensions', to='courses.stepprogress')),
            ],
            options={
                'ordering': ('-requested_at',),
            },
        ),
        migrations.CreateModel(
            name='SocialPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('urls', django.contrib.postgres.fields.ArrayField(base_field=models.URLField(max_length=500), blank=True, default=list, help_text='One or more URLs of the published post(s).', size=None)),
                ('posted_at', models.DateTimeField()),
                ('description', models.TextField(blank=True, max_length=10000)),
                ('learner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='social_posts', to='courses.learner')),
                ('platform', models.ManyToManyField(related_name='social_posts', to='courses.socialmedia')),
                ('step_progress', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='social_posts', to='courses.stepprogress')),
            ],
            options={
                'ordering': ('-posted_at',),
            },
        ),
        migrations.CreateModel(
            name='StepProgressSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField(auto_now=True)),
                ('present', models.BooleanField(default=True)),
                ('description', models.TextField(blank=True)),
                ('recorded_meet_link', models.URLField()),
                ('session_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='step_progress_sessions', to='courses.sessiontype')),
                ('step_progress', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='step_progress_sessions', to='courses.stepprogress')),
            ],
        ),
        migrations.CreateModel(
            name='PlanFeature',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feature', models.ManyToManyField(related_name='feature_plans', to='courses.feature')),
                ('plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='plan_features', to='courses.subscriptionplan')),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=120)),
                ('description', models.TextField(blank=True)),
                ('order_in_step', models.PositiveSmallIntegerField()),
                ('is_required', models.BooleanField(default=True)),
                ('step', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='courses.educationalstep')),
            ],
            options={
                'ordering': ('step', 'order_in_step'),
            },
        ),
        migrations.CreateModel(
            name='TaskSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submitted_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('artifact_url', models.URLField(blank=True, max_length=500)),
                ('file', models.FileField(blank=True, upload_to=courses.models.submissions_upload_to)),
                ('report_video_file', models.FileField(blank=True, upload_to=courses.models.submissions_upload_to)),
                ('report_video_link', models.URLField(blank=True, max_length=500)),
                ('repository', models.URLField(blank=True, max_length=500)),
                ('comment', models.TextField(blank=True)),
                ('step_progress', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='courses.stepprogress')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='courses.task')),
            ],
            options={
                'ordering': ('-submitted_at',),
            },
        ),
        migrations.CreateModel(
            name='TaskEvaluation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score_numeric', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('feedback_text', models.TextField(blank=True, max_length=10000)),
                ('evaluated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('mentor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='evaluations', to='courses.mentor')),
                ('submission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='evaluations', to='courses.tasksubmission')),
            ],
            options={
                'ordering': ('-evaluated_at',),
            },
        ),
        migrations.AddIndex(
            model_name='learnerenrolment',
            index=models.Index(fields=['learning_path', 'enroll_date'], name='courses_lea_learnin_03aaf9_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='learnerenrolment',
            unique_together={('learner', 'learning_path')},
        ),
        migrations.AlterUniqueTogether(
            name='educationalstep',
            unique_together={('learning_path', 'sequence_no')},
        ),
        migrations.AlterUniqueTogether(
            name='mentorassignment',
            unique_together={('enrolment', 'mentor', 'start_date')},
        ),
        migrations.AddIndex(
            model_name='mentorgroupsessionoccurrence',
            index=models.Index(fields=['mentor_group_session', 'occurence_datetime'], name='courses_men_mentor__3afff1_idx'),
        ),
        migrations.AddConstraint(
            model_name='mentorgroupsessionoccurrence',
            constraint=models.CheckConstraint(condition=models.Q(models.Q(('new_datetime__isnull', False), ('occurence_datetime_changed', True)), models.Q(('new_datetime__isnull', True), ('occurence_datetime_changed', False)), _connector='OR'), name='occurrence_requires_new_datetime_when_changed'),
        ),
        migrations.AlterUniqueTogether(
            name='mentorgroupsessionparticipant',
            unique_together={('mentor_group_session_occurence', 'mentor_assignment')},
        ),
        migrations.AlterUniqueTogether(
            name='stepprogress',
            unique_together={('mentor_assignment', 'educational_step')},
        ),
        migrations.AddConstraint(
            model_name='learnersubscribeplan',
            constraint=models.UniqueConstraint(fields=('learner_enrolment', 'start_datetime'), name='unique_start_per_enrolment'),
        ),
        migrations.AlterUniqueTogether(
            name='task',
            unique_together={('step', 'order_in_step')},
        ),
        migrations.AddConstraint(
            model_name='taskevaluation',
            constraint=models.CheckConstraint(condition=models.Q(('score_numeric__gte', 1), ('score_numeric__lte', 5)), name='valid_score_range'),
        ),
        migrations.AlterUniqueTogether(
            name='taskevaluation',
            unique_together={('submission', 'mentor')},
        ),
    ]
